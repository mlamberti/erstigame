import gql from 'graphql-tag';
import { Injectable } from '@angular/core';
import * as Apollo from 'apollo-angular';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  Upload: any,
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any,
};



/** Autogenerated return type of CreateGroup */
export type CreateGroupPayload = {
  __typename?: 'CreateGroupPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  group?: Maybe<Group>,
  joinToken?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of CreatePhoto */
export type CreatePhotoPayload = {
  __typename?: 'CreatePhotoPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  photo?: Maybe<Photo>,
};

/** Autogenerated return type of CreateRallyeRating */
export type CreateRallyeRatingPayload = {
  __typename?: 'CreateRallyeRatingPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  rallyeRating?: Maybe<RallyeRating>,
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload',
  authToken?: Maybe<Scalars['String']>,
  errors?: Maybe<Array<Scalars['String']>>,
  user?: Maybe<User>,
};

export enum GenderEnum {
  Maschi = 'MASCHI',
  Maschine = 'MASCHINE',
  Pinguin = 'PINGUIN'
}

export type Group = Node & {
  __typename?: 'Group',
  createdAt?: Maybe<Scalars['String']>,
  hashtagsAvailable?: Maybe<Array<Hashtag>>,
  id: Scalars['ID'],
  level: Level,
  name: Scalars['String'],
  numCatches: Scalars['Int'],
  numHours: Scalars['Float'],
  numPlaces: Scalars['Int'],
  numSponsors: Scalars['Int'],
  number: Scalars['Int'],
  photos: Array<Photo>,
  points: Scalars['Int'],
  rallyePoints: Scalars['Int'],
  rallyeRating?: Maybe<RallyeRating>,
  rallyeRatings: Array<RallyeRating>,
  token?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
  users?: Maybe<Array<User>>,
};

export type Hashtag = Node & {
  __typename?: 'Hashtag',
  category?: Maybe<HashtagCategory>,
  createdAt?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  doable?: Maybe<Scalars['Boolean']>,
  done?: Maybe<Scalars['Boolean']>,
  id: Scalars['ID'],
  info: Scalars['String'],
  level?: Maybe<Level>,
  name: Scalars['String'],
  picture?: Maybe<Scalars['String']>,
  points: Scalars['Int'],
  repeatTime?: Maybe<Scalars['String']>,
  repeatable?: Maybe<Scalars['Boolean']>,
  repeatableAt?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
};

export enum HashtagCategory {
  Catch = 'CATCH',
  Sponsor = 'SPONSOR',
  Place = 'PLACE'
}


export type Level = Node & {
  __typename?: 'Level',
  createdAt?: Maybe<Scalars['String']>,
  id: Scalars['ID'],
  numCatches: Scalars['Int'],
  numHours: Scalars['Int'],
  numPlaces: Scalars['Int'],
  numSponsors: Scalars['Int'],
  rank: Scalars['Int'],
  requiredHashtags?: Maybe<Array<Hashtag>>,
  updatedAt?: Maybe<Scalars['String']>,
};

export type Mutation = {
  __typename?: 'Mutation',
  createGroup?: Maybe<CreateGroupPayload>,
  createPhoto?: Maybe<CreatePhotoPayload>,
  createRallyeRating?: Maybe<CreateRallyeRatingPayload>,
  createUser?: Maybe<CreateUserPayload>,
};


export type MutationCreateGroupArgs = {
  name: Scalars['String']
};


export type MutationCreatePhotoArgs = {
  picture: Scalars['Upload'],
  peopleCount: Scalars['Int'],
  hashtagIds: Array<Scalars['ID']>,
  date?: Maybe<Scalars['ISO8601DateTime']>
};


export type MutationCreateRallyeRatingArgs = {
  groupId: Scalars['ID'],
  stationToken: Scalars['String'],
  points: Scalars['Int']
};


export type MutationCreateUserArgs = {
  name: Scalars['String'],
  groupToken: Scalars['String'],
  gender?: Maybe<GenderEnum>,
  info?: Maybe<Scalars['String']>
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'],
};

export type Photo = Node & {
  __typename?: 'Photo',
  createdAt?: Maybe<Scalars['String']>,
  date: Scalars['String'],
  group: Group,
  hashtags: Array<Hashtag>,
  id: Scalars['ID'],
  numCatches: Scalars['Int'],
  numHours: Scalars['Float'],
  numPlaces: Scalars['Int'],
  numSponsors: Scalars['Int'],
  path: Scalars['String'],
  peopleCount: Scalars['Int'],
  points: Scalars['Int'],
  updatedAt?: Maybe<Scalars['String']>,
  url: Scalars['String'],
  user: User,
};

export type Query = {
  __typename?: 'Query',
  group?: Maybe<Group>,
  groupByToken?: Maybe<Group>,
  hashtag?: Maybe<Hashtag>,
  rallyeStation?: Maybe<RallyeStation>,
  user?: Maybe<User>,
  viewer?: Maybe<User>,
};


export type QueryGroupArgs = {
  id: Scalars['ID']
};


export type QueryGroupByTokenArgs = {
  token: Scalars['String']
};


export type QueryHashtagArgs = {
  hashtagId: Scalars['ID']
};


export type QueryRallyeStationArgs = {
  token: Scalars['String']
};


export type QueryUserArgs = {
  id: Scalars['ID']
};

export type RallyeRating = Node & {
  __typename?: 'RallyeRating',
  group: Group,
  id: Scalars['ID'],
  points: Scalars['Int'],
  stationName: Scalars['String'],
};

export type RallyeStation = Node & {
  __typename?: 'RallyeStation',
  allGroups: Array<Group>,
  id: Scalars['ID'],
  name: Scalars['String'],
  rallyeRatings: Array<RallyeRating>,
  tag: Scalars['String'],
};


export type User = Node & {
  __typename?: 'User',
  createdAt?: Maybe<Scalars['String']>,
  gender?: Maybe<GenderEnum>,
  group: Group,
  id: Scalars['ID'],
  info?: Maybe<Scalars['String']>,
  invalidated: Scalars['Boolean'],
  name: Scalars['String'],
  photos?: Maybe<Array<Photo>>,
  picture?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
};

export type CreatePhotoMutationVariables = {
  picture: Scalars['Upload'],
  peopleCount: Scalars['Int'],
  date?: Maybe<Scalars['ISO8601DateTime']>,
  hashtagIds: Array<Scalars['ID']>
};


export type CreatePhotoMutation = (
  { __typename?: 'Mutation' }
  & { createPhoto: Maybe<(
    { __typename?: 'CreatePhotoPayload' }
    & Pick<CreatePhotoPayload, 'errors'>
    & { photo: Maybe<(
      { __typename?: 'Photo' }
      & Pick<Photo, 'id'>
    )> }
  )> }
);

export type CheckAuthQueryVariables = {};


export type CheckAuthQuery = (
  { __typename?: 'Query' }
  & { viewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
  )> }
);

export type DashboardQueryVariables = {};


export type DashboardQuery = (
  { __typename?: 'Query' }
  & { viewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name'>
    & { group: (
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'name' | 'points' | 'numCatches' | 'numPlaces' | 'numSponsors' | 'numHours'>
      & { level: (
        { __typename?: 'Level' }
        & Pick<Level, 'id' | 'rank' | 'numCatches' | 'numPlaces' | 'numSponsors' | 'numHours'>
        & { requiredHashtags: Maybe<Array<(
          { __typename?: 'Hashtag' }
          & Pick<Hashtag, 'id' | 'name' | 'done'>
        )>> }
      ), photos: Array<(
        { __typename?: 'Photo' }
        & Pick<Photo, 'id' | 'peopleCount' | 'numHours' | 'points' | 'url' | 'date'>
        & { user: (
          { __typename?: 'User' }
          & Pick<User, 'id' | 'name' | 'picture'>
        ), hashtags: Array<(
          { __typename?: 'Hashtag' }
          & Pick<Hashtag, 'id' | 'name' | 'category'>
        )> }
      )>, hashtagsAvailable: Maybe<Array<(
        { __typename?: 'Hashtag' }
        & Pick<Hashtag, 'id' | 'name' | 'info' | 'category' | 'points' | 'repeatTime' | 'repeatable' | 'done' | 'doable'>
        & { level: Maybe<(
          { __typename?: 'Level' }
          & Pick<Level, 'id' | 'rank'>
        )> }
      )>> }
    ) }
  )> }
);

export type RallyeRatingsQueryVariables = {};


export type RallyeRatingsQuery = (
  { __typename?: 'Query' }
  & { viewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name'>
    & { group: (
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'rallyePoints'>
      & { rallyeRatings: Array<(
        { __typename?: 'RallyeRating' }
        & Pick<RallyeRating, 'id' | 'stationName' | 'points'>
      )> }
    ) }
  )> }
);

export type HashtagInfoQueryVariables = {
  hashtagId: Scalars['ID']
};


export type HashtagInfoQuery = (
  { __typename?: 'Query' }
  & { hashtag: Maybe<(
    { __typename?: 'Hashtag' }
    & Pick<Hashtag, 'id' | 'name' | 'info' | 'description' | 'picture' | 'points' | 'repeatTime' | 'category'>
  )> }
);

export type CreateRallyeRatingMutationVariables = {
  groupId: Scalars['ID'],
  stationToken: Scalars['String'],
  points: Scalars['Int']
};


export type CreateRallyeRatingMutation = (
  { __typename?: 'Mutation' }
  & { createRallyeRating: Maybe<(
    { __typename?: 'CreateRallyeRatingPayload' }
    & Pick<CreateRallyeRatingPayload, 'errors'>
    & { rallyeRating: Maybe<(
      { __typename?: 'RallyeRating' }
      & Pick<RallyeRating, 'id' | 'points'>
      & { group: (
        { __typename?: 'Group' }
        & Pick<Group, 'id'>
      ) }
    )> }
  )> }
);

export type RallyeStationQueryVariables = {
  token: Scalars['String']
};


export type RallyeStationQuery = (
  { __typename?: 'Query' }
  & { rallyeStation: Maybe<(
    { __typename?: 'RallyeStation' }
    & Pick<RallyeStation, 'id' | 'tag' | 'name'>
    & { allGroups: Array<(
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'name' | 'number'>
      & { rallyeRating: Maybe<(
        { __typename?: 'RallyeRating' }
        & Pick<RallyeRating, 'points'>
      )> }
    )>, rallyeRatings: Array<(
      { __typename?: 'RallyeRating' }
      & Pick<RallyeRating, 'id' | 'points'>
      & { group: (
        { __typename?: 'Group' }
        & Pick<Group, 'id'>
      ) }
    )> }
  )> }
);

export type CreateGroupMutationVariables = {
  name: Scalars['String']
};


export type CreateGroupMutation = (
  { __typename?: 'Mutation' }
  & { createGroup: Maybe<(
    { __typename?: 'CreateGroupPayload' }
    & Pick<CreateGroupPayload, 'joinToken' | 'errors'>
    & { group: Maybe<(
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'name'>
    )> }
  )> }
);

export type CreateUserMutationVariables = {
  name: Scalars['String'],
  token: Scalars['String'],
  gender?: Maybe<GenderEnum>,
  info?: Maybe<Scalars['String']>
};


export type CreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser: Maybe<(
    { __typename?: 'CreateUserPayload' }
    & Pick<CreateUserPayload, 'authToken' | 'errors'>
    & { user: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name' | 'gender' | 'info'>
      & { group: (
        { __typename?: 'Group' }
        & Pick<Group, 'id' | 'name'>
      ) }
    )> }
  )> }
);

export type GroupByTokenQueryVariables = {
  joinToken: Scalars['String']
};


export type GroupByTokenQuery = (
  { __typename?: 'Query' }
  & { groupByToken: Maybe<(
    { __typename?: 'Group' }
    & Pick<Group, 'id' | 'name'>
  )> }
);


export const CreatePhotoDocument = gql`
    mutation CreatePhoto($picture: Upload!, $peopleCount: Int!, $date: ISO8601DateTime, $hashtagIds: [ID!]!) {
  createPhoto(picture: $picture, peopleCount: $peopleCount, date: $date, hashtagIds: $hashtagIds) {
    photo {
      id
    }
    errors
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreatePhotoGQL extends Apollo.Mutation<CreatePhotoMutation, CreatePhotoMutationVariables> {
    document = CreatePhotoDocument;
    
  }
export const CheckAuthDocument = gql`
    query CheckAuth {
  viewer {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CheckAuthGQL extends Apollo.Query<CheckAuthQuery, CheckAuthQueryVariables> {
    document = CheckAuthDocument;
    
  }
export const DashboardDocument = gql`
    query dashboard {
  viewer {
    id
    name
    group {
      id
      name
      points
      numCatches
      numPlaces
      numSponsors
      numHours
      level {
        id
        rank
        requiredHashtags {
          id
          name
          done
        }
        numCatches
        numPlaces
        numSponsors
        numHours
      }
      photos {
        id
        user {
          id
          name
          picture
        }
        hashtags {
          id
          name
          category
        }
        peopleCount
        numHours
        points
        url
        date
      }
      hashtagsAvailable {
        id
        name
        info
        category
        level {
          id
          rank
        }
        points
        repeatTime
        repeatable
        done
        doable
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DashboardGQL extends Apollo.Query<DashboardQuery, DashboardQueryVariables> {
    document = DashboardDocument;
    
  }
export const RallyeRatingsDocument = gql`
    query rallyeRatings {
  viewer {
    id
    name
    group {
      id
      rallyeRatings {
        id
        stationName
        points
      }
      rallyePoints
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class RallyeRatingsGQL extends Apollo.Query<RallyeRatingsQuery, RallyeRatingsQueryVariables> {
    document = RallyeRatingsDocument;
    
  }
export const HashtagInfoDocument = gql`
    query HashtagInfo($hashtagId: ID!) {
  hashtag(hashtagId: $hashtagId) {
    id
    name
    info
    description
    picture
    points
    repeatTime
    category
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class HashtagInfoGQL extends Apollo.Query<HashtagInfoQuery, HashtagInfoQueryVariables> {
    document = HashtagInfoDocument;
    
  }
export const CreateRallyeRatingDocument = gql`
    mutation CreateRallyeRating($groupId: ID!, $stationToken: String!, $points: Int!) {
  createRallyeRating(groupId: $groupId, stationToken: $stationToken, points: $points) {
    rallyeRating {
      id
      group {
        id
      }
      points
    }
    errors
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateRallyeRatingGQL extends Apollo.Mutation<CreateRallyeRatingMutation, CreateRallyeRatingMutationVariables> {
    document = CreateRallyeRatingDocument;
    
  }
export const RallyeStationDocument = gql`
    query RallyeStation($token: String!) {
  rallyeStation(token: $token) {
    id
    tag
    name
    allGroups {
      id
      name
      number
      rallyeRating {
        points
      }
    }
    rallyeRatings {
      id
      group {
        id
      }
      points
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class RallyeStationGQL extends Apollo.Query<RallyeStationQuery, RallyeStationQueryVariables> {
    document = RallyeStationDocument;
    
  }
export const CreateGroupDocument = gql`
    mutation CreateGroup($name: String!) {
  createGroup(name: $name) {
    group {
      id
      name
    }
    joinToken
    errors
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateGroupGQL extends Apollo.Mutation<CreateGroupMutation, CreateGroupMutationVariables> {
    document = CreateGroupDocument;
    
  }
export const CreateUserDocument = gql`
    mutation CreateUser($name: String!, $token: String!, $gender: GenderEnum, $info: String) {
  createUser(name: $name, groupToken: $token, gender: $gender, info: $info) {
    user {
      id
      name
      gender
      info
      group {
        id
        name
      }
    }
    authToken
    errors
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateUserGQL extends Apollo.Mutation<CreateUserMutation, CreateUserMutationVariables> {
    document = CreateUserDocument;
    
  }
export const GroupByTokenDocument = gql`
    query GroupByToken($joinToken: String!) {
  groupByToken(token: $joinToken) {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GroupByTokenGQL extends Apollo.Query<GroupByTokenQuery, GroupByTokenQueryVariables> {
    document = GroupByTokenDocument;
    
  }