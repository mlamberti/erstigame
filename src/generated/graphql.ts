import gql from 'graphql-tag';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  Upload: any,
};



/** Autogenerated return type of AddGroupRallyeRating */
export type AddGroupRallyeRatingPayload = {
  __typename?: 'AddGroupRallyeRatingPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  rallyeRating?: Maybe<RallyeRating>,
};

/** Autogenerated return type of CreatePhoto */
export type CreatePhotoPayload = {
  __typename?: 'CreatePhotoPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  photo?: Maybe<Photo>,
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  token?: Maybe<Scalars['String']>,
  user?: Maybe<User>,
};

export type Group = Node & {
  __typename?: 'Group',
  createdAt?: Maybe<Scalars['String']>,
  hashtags?: Maybe<Array<Hashtag>>,
  id: Scalars['ID'],
  level: Level,
  name: Scalars['String'],
  numCatches: Scalars['Int'],
  numPlaces: Scalars['Int'],
  numSponsors: Scalars['Int'],
  photos: Array<Photo>,
  points: Scalars['Int'],
  rallyeRatings: Array<RallyeRating>,
  timeTogether: Scalars['Int'],
  updatedAt?: Maybe<Scalars['String']>,
  users: Array<User>,
};

export type Hashtag = Node & {
  __typename?: 'Hashtag',
  category?: Maybe<HashtagCategory>,
  createdAt?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  doable?: Maybe<Scalars['Boolean']>,
  done?: Maybe<Scalars['Boolean']>,
  id: Scalars['ID'],
  info: Scalars['String'],
  level?: Maybe<Level>,
  name: Scalars['String'],
  picture?: Maybe<Scalars['String']>,
  points: Scalars['Int'],
  repeatTime?: Maybe<Scalars['String']>,
  repeatable?: Maybe<Scalars['Boolean']>,
  repeatableAt?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
};

export enum HashtagCategory {
  Catch = 'CATCH',
  Sponsor = 'SPONSOR',
  Place = 'PLACE'
}

export type Level = Node & {
  __typename?: 'Level',
  createdAt?: Maybe<Scalars['String']>,
  id: Scalars['ID'],
  numCatches: Scalars['Int'],
  numHours: Scalars['Int'],
  numPlaces: Scalars['Int'],
  numSponsors: Scalars['Int'],
  rank: Scalars['Int'],
  updatedAt?: Maybe<Scalars['String']>,
};

export type Mutation = {
  __typename?: 'Mutation',
  addGroupRallyeRating?: Maybe<AddGroupRallyeRatingPayload>,
  createPhoto?: Maybe<CreatePhotoPayload>,
  createUser?: Maybe<CreateUserPayload>,
};


export type MutationAddGroupRallyeRatingArgs = {
  token: Scalars['String']
};


export type MutationCreatePhotoArgs = {
  peopleCount: Scalars['Int'],
  hashtagIds: Array<Scalars['ID']>,
  picture: Scalars['Upload']
};


export type MutationCreateUserArgs = {
  name: Scalars['String'],
  groupToken: Scalars['String']
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'],
};

export type Photo = Node & {
  __typename?: 'Photo',
  createdAt?: Maybe<Scalars['String']>,
  date: Scalars['String'],
  group: Group,
  hashtags: Array<Hashtag>,
  id: Scalars['ID'],
  path: Scalars['String'],
  peopleCount: Scalars['Int'],
  points: Scalars['Int'],
  updatedAt?: Maybe<Scalars['String']>,
  user: User,
};

export type Query = {
  __typename?: 'Query',
  group?: Maybe<Group>,
  hashtag?: Maybe<Hashtag>,
  user?: Maybe<User>,
  viewer?: Maybe<User>,
};


export type QueryGroupArgs = {
  id: Scalars['ID']
};


export type QueryHashtagArgs = {
  id: Scalars['ID']
};


export type QueryUserArgs = {
  id: Scalars['ID']
};

export type RallyeRating = Node & {
  __typename?: 'RallyeRating',
  id: Scalars['ID'],
  points: Scalars['Int'],
  rallyeStation: RallyeStation,
};

export type RallyeStation = Node & {
  __typename?: 'RallyeStation',
  id: Scalars['ID'],
  name: Scalars['String'],
  rallyeRatings: Array<RallyeRating>,
};


export type User = Node & {
  __typename?: 'User',
  createdAt?: Maybe<Scalars['String']>,
  group: Group,
  id: Scalars['ID'],
  info?: Maybe<Scalars['String']>,
  name: Scalars['String'],
  photos?: Maybe<Array<Photo>>,
  picture?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
};
