import gql from 'graphql-tag';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
};



/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload',
  errors?: Maybe<Array<Scalars['String']>>,
  token?: Maybe<Scalars['String']>,
  user?: Maybe<User>,
};

export type Group = {
  __typename?: 'Group',
  createdAt?: Maybe<Scalars['String']>,
  hashtags?: Maybe<Array<Hashtag>>,
  id: Scalars['ID'],
  level: Scalars['Int'],
  name: Scalars['String'],
  photos: Array<Photo>,
  updatedAt?: Maybe<Scalars['String']>,
  users: Array<User>,
};

export type Hashtag = Node & {
  __typename?: 'Hashtag',
  createdAt?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  done?: Maybe<Scalars['Boolean']>,
  id: Scalars['ID'],
  info: Scalars['String'],
  level: Scalars['Int'],
  name: Scalars['String'],
  picture?: Maybe<Scalars['String']>,
  points: Scalars['Int'],
  repeatTime?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
};

export type Mutation = {
  __typename?: 'Mutation',
  createUser?: Maybe<CreateUserPayload>,
};


export type MutationCreateUserArgs = {
  name: Scalars['String'],
  groupToken: Scalars['String']
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'],
};

export type Photo = {
  __typename?: 'Photo',
  createdAt?: Maybe<Scalars['String']>,
  date: Scalars['String'],
  group: Group,
  hashtags: Array<Hashtag>,
  id: Scalars['ID'],
  path: Scalars['String'],
  peopleCount: Scalars['Int'],
  points: Scalars['Int'],
  updatedAt?: Maybe<Scalars['String']>,
  user: User,
};

export type Query = {
  __typename?: 'Query',
  allGroups: Array<Group>,
  allHashtags: Array<Hashtag>,
  allUsers: Array<User>,
  group?: Maybe<Group>,
  hashtag?: Maybe<Hashtag>,
  user?: Maybe<User>,
  viewer?: Maybe<User>,
};


export type QueryGroupArgs = {
  id: Scalars['ID']
};


export type QueryHashtagArgs = {
  id: Scalars['ID']
};


export type QueryUserArgs = {
  id: Scalars['ID']
};

export type User = {
  __typename?: 'User',
  createdAt?: Maybe<Scalars['String']>,
  group: Group,
  id: Scalars['ID'],
  info?: Maybe<Scalars['String']>,
  name: Scalars['String'],
  photos?: Maybe<Array<Photo>>,
  picture?: Maybe<Scalars['String']>,
  updatedAt?: Maybe<Scalars['String']>,
};
